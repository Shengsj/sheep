/*
 * Copyright (c) 2015
 *      The President and Fellows of Harvard College.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#pragma once

#include <cassert>


/* COMPILE-TIME OPTIONS:
 * By default these options are all disabled, and this is reasonable.
 * Only enable them if you know what you are doing. */


/* OPTION: Deduplicate edges while loading the graph.
 * Enabling this option prevents multigraphs.
 * However, this option does not work with distributed loading. */
//#define DDUP_GRAPH


/* OPTION: Read and write vertex sequences in a binary format.
 * This is marginally more performant, but it makes it more difficult
 * to work with sequences generated by external programs. */
//#define USE_BIN_SEQUENCE


/* OPTION: Use a simpler union find without union-by-rank.
 * This saves a marginal amount of memory,
 * but has a non-marginal performance cost. */
//#define USE_SIMPLE_UF


/* OPTION: Save preorder weight for each vertex in the tree.
 * These weights are needed by some (non-default) partitioning models.
 * However, they consume sizeof(esize_t) bytes of memory per vertex.
 * This is a significant performance hit. */
//#define USE_PRE_WEIGHT


/* OPTION: Use LLAMA or SNAP for storage.
 * BE WARNED: LLAMA vastly outperforms SNAP,
 * and SNAP has not been tested in quite some time. */
#define USE_LLAMA
//#define USE_SNAP


/* SIZE TYPES
 * These are used for fundamental storage;
 * larger types can store larger graphs, but at significant cost. */
#ifdef USE_LLAMA
typedef uint32_t vid_t;
typedef uint32_t esize_t;
#elif USE_SNAP
typedef int vid_t;
typedef size_t esize_t;
#endif
#define INVALID_VID ((vid_t)-1)


#define KILO (1024)
#define MEGA (1024 * KILO)
#define GIGA (1024 * MEGA)

